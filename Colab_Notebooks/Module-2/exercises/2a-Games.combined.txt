# Python Exercises - Games
Build each of the following games in Python:



1. **Rock, Paper, Scissors** - In this game, the user will be playing Rock, Paper, Scissors against the computer. Your code should request input from the user and it should randomly generate a choice for the computer. It should print out the winner along with a message about how they won (e.g., "The computer won. Scissor cuts paper").



2. **MadLibs** - In this game, you will request string input from the user (adjectives, nouns, verbs, etc.) and then you will use that input to generate and print out a MadLibs story. Make sure to format the string input so that it looks nice in your story.



3. **Number Guesser** - This is a simple guessing game where the computer will generate a random number between 1 to 10, and the user has to guess it in 5 attempts. Based on the userâ€™s guess, the computer will give a hint if the number is high or low. When the user correctly guesses, print the answer along with the number of attempts.

## Rock, Paper, Scissors
## MadLibs
## Number Guesser
import random



def rock_paper_scissors():

    choices = ['rock', 'paper', 'scissors']

    player_score = 0

    computer_score = 0



    num_games = int(input("How many games would you like to play? "))



    for i in range(num_games):

        print(f"\nGame {i+1} of {num_games}")

        user_choice = input("Enter rock, paper, or scissors: ").lower()



        while user_choice not in choices:

            user_choice = input("Invalid choice. Please enter rock, paper, or scissors: ").lower()



        computer_choice = random.choice(choices)



        print(f"\nUser chose {user_choice}, computer chose {computer_choice}.\n")



        if user_choice == computer_choice:

            print(f"It's a tie!")

        elif user_choice == 'rock':

            if computer_choice == 'scissors':

                print("Rock smashes scissors! You win!")

                player_score += 1

            else:

                print("Paper covers rock! You lose.")

                computer_score += 1

        elif user_choice == 'paper':

            if computer_choice == 'rock':

                print("Paper covers rock! You win!")

                player_score += 1

            else:

                print("Scissors cuts paper! You lose.")

                computer_score += 1

        elif user_choice == 'scissors':

            if computer_choice == 'paper':

                print("Scissors cuts paper! You win!")

                player_score += 1

            else:

                print("Rock smashes scissors! You lose.")

                computer_score += 1



        print(f"\nScore - You: {player_score}, Computer: {computer_score}")



    print(f"\nFinal Score - You: {player_score}, Computer: {computer_score}")

    if player_score > computer_score:

        print("Congratulations, you won the series!")

    elif player_score < computer_score:

        print("Sorry, the computer won the series.")

    else:

        print("It's a tie series!")



rock_paper_scissors()

def mad_libs():

    stories = {

        "1": "One day, a very {adjective} {noun} was walking down the street. " \

             "Suddenly, a strong gust of wind blew the {noun}'s hat right off! " \

             "The {noun} tried to {verb} after it, but it flew all the way to {place}.",



        "2": "Yesterday, I saw a {adjective} {noun} eating a {adjective} sandwich. " \

             "I was feeling very {adjective} and decided to {verb} my favorite song. " \

             "After that, I went to the {place} and saw my friend's {adjective} {noun}.",



        "3": "Last night, I had a {adjective} dream about a {adjective} {noun}. " \

             "In the dream, I was {verb} through a {adjective} {place} filled with {plural_noun}. " \

             "When I woke up, I felt very {adjective} and decided to {verb} my {noun}.",



        "4": "My favorite {noun} is the {adjective} {noun}. " \

             "I love to {verb} it in the {place} while watching the {plural_noun}. " \

             "It's so {adjective} that I could eat it every day of the {noun}.",



        "5": "The {adjective} {noun} {verb} quickly through the {place}. " \

             "It was chasing a {adjective} {noun} who was carrying a {noun} of {plural_noun}. " \

             "As they {verb} by, they left a trail of {plural_noun} behind them."

    }



    while True:

        print("Select a story:")

        for key, story in stories.items():

            print(f"{key}: {story[:50]}...")



        story_choice = input("Enter the number of your chosen story: ")



        if story_choice not in stories:

            print("Invalid choice. Defaulting to story 1.")

            story_choice = "1"



        chosen_story = stories[story_choice]



        print("\nPlease provide the following words:")



        words = {

            "noun": input("Enter a noun: "),

            "adjective": input("Enter an adjective: "),

            "verb": input("Enter a verb: "),

            "place": input("Enter a place: "),

            "plural_noun": input("Enter a plural noun: ")

        }



        filled_story = chosen_story.format(**words)



        print("\nHere's your Mad Libs story:")

        print(filled_story)



        play_again = input("\nDo you want to play again? (yes/no): ").lower()

        while play_again not in ['yes', 'no']:

            play_again = input("Invalid input. Please enter 'yes' or 'no': ").lower()



        if play_again == 'no':

            print("Thanks for playing!")

            break



mad_libs()

import random



def number_guesser():

    secret_number = random.randint(1, 10)

    attempts = 0



    while attempts < 5:

        guess = int(input("Guess a number between 1 and 10: "))

        attempts += 1



        if guess == secret_number:

            print(f"Congratulations! You found the number in {attempts} attempts.")

            return

        elif guess < secret_number:

            print("Too low! Try again.")

        else:

            print("Too high! Try again.")



    print(f"Sorry, you didn't guess the number. The secret number was {secret_number}.")



number_guesser()

