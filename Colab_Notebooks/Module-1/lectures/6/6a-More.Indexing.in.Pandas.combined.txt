# More Indexing in Pandas
## Review of column and row indexing
### Using column names
### Columns with iloc indices
### Rows with indices

### Indexing for a single entry
## Attribute Access
> WARNING: Do Not Use This



You can access columns in a dataframe as attributes. Note: there are a few cases when the attribute will not work, such as if your column is named a number (e.g., 1) or if it is named after an existing method (e.g., min).
## Boolean Indexing
## Indexing w/ Isin
## Numpy Where

The numpy where method can be useful to find rows that correspond to a particular conditional statement.
## Random Sampling in Pandas
import pandas as pd
# Create a data frame

my_dict = {'Name': ['Mary', 'Joe', 'Roger', 'Sarah', 'Mike', 'Robert'],

           'Age': [20, 45, 32, 58, 39, 42],

           'City': ['Albuquerque', 'Rio Rancho', 'Santa Fe', 'Taos', 'Albuquerque', 'Placitas'],

           'Occupation': ['student', 'doctor', 'data scientist', 'general contractor', 'student', 'manager']}

people_df = pd.DataFrame(my_dict)

people_df
# Column indexing

people_df['Name']
# Column indexing

people_df[['Name']]
# Multiple column indexing

people_df[['Name', 'Age']]
# Multiple column indexing

people_df[['Name', 'Age','Name']]
name_index = people_df.columns[::-2]

name_index
people_df[ name_index ]
# Column indexing using .iloc - indexing

people_df.iloc[:,0]
# Column indexing using .iloc - slicing

people_df.iloc[:,0::2]
# Column indexing using .iloc - list

people_df.iloc[:,[1,0,3,2,3]]
# Row indexing using .loc

people_df.loc[1]
# Row indexing using .iloc

people_df.iloc[1] # .loc and .iloc are the same for this data frame because the index has not been changed
# Multiple rows - slicing

people_df.loc[0:2]
people_df.iloc[0:2]
# Selecting rows in any order - list

people_df.loc[[0,3,3,2,1]]
# Row and column indexing

people_df['Name'][0]
# Another way

people_df['Name'].loc[0]
# Another way

people_df.loc[0]['Name']
# Another way

people_df.loc[0].loc['Name']
# Another way

people_df.loc[0,'Name']
# Another way

people_df.iloc[0,0]
# Another way

people_df.iloc[0].iloc[0]
# Another way

people_df.iloc[0].loc["Name"]
people_df
people_df.Name
people_df.Name.loc[0]
filter = ( people_df['Age'] > 40 ) # Create a filter

filter
people_df[ filter ] # Use that filter to index
# Another example - people from Albuquerque

filter = ( people_df['City'] == 'Albuquerque' )

filter

people_df[ filter ] # Use that filter to index
# A third example! People from albuquerque or people who are doctors

filter1 = ( people_df['City'] == 'Albuquerque' )

filter1

filter2 = ( people_df['Occupation'] == 'doctor' )

filter2

filter = filter1 | filter2

filter

# verify

pd.concat([filter1, filter2, filter, people_df], axis='columns')

people_df[ filter ] # Use that filter to index

# Negating

filter = ( people_df['Name'] == 'Mary' )

filter

# verify

pd.concat([filter, ~filter, people_df], axis='columns')

people_df[ ~filter ] # Use that filter to index

people_df[people_df['Name'] != 'Mary']
filter = ( people_df['City'].isin(['Rio Rancho', 'Santa Fe', 'Taos']) ) # Create a filter

filter
# verify

pd.concat( [ filter, people_df ], axis='columns')

people_df[ filter ] # Use that filter to index

import numpy as np

filter = ( people_df['City'] == 'Albuquerque' )

filter

where_index = np.where( filter )

where_index[0]
people_df
people_df.iloc[ where_index[0] ]
people_df.drop( where_index[0] )
people_df_no_abq = people_df.drop( where_index[0] )

people_df_no_abq
people_df_no_abq.iloc[ where_index[0][0] ]
people_df_no_abq.reset_index()
people_df_no_abq
people_df_no_abq.reset_index( drop = True )
people_df_no_abq.reset_index(drop = True, inplace = True)

people_df_no_abq
people_df
# Take a random sample of size 3

people_df.sample( n = 3, )
# Take a random proportion

people_df.sample( frac = 1/3 )
people_df.groupby('City').sample(n = 1)
# Take a randoom sample but set the seed for reproducibility

people_df.sample(n = 3, random_state = 0)
