## Types - built-in data structures - collections

- Lists

  - Mutable - You can change them!

  - Indexed

  - Ordered by index ( not by value )

  - Values

    - Can be anything: e.g. numbers, other lists

    - Duplicates allowed

  - [1, 2, 3]

- Dictionaries

  - Mutable

  - Key-Value Pairs

  - Unordered for older version of Python, Ordered for newer versions

  - Keys

    - Unique elements ( no duplicates )

    - Numbers or Strings

  - Values

    - Anything

  - {a:1, b:2, c:3}

  - Use case: information for a user ( user id is key, info is value stored )

- Sets

  - Mutable

  - Unordered

  - Unique elements ( no duplicates )

  - {1, 2, 3}

  - Use case: determine if a particular value has been seen before

- Tuples

  - Unmutable - You can't change them!

  - Ordered

  - (1, 2, 3)

  - Use case: returning values from a function

For all of these collections, think [CRUD]( https://en.wikipedia.org/wiki/Create,_read,_update_and_delete ): Create, Read, Update, Delete.
## Dictionaries


- Unordered for older version of Python, Ordered for newer versions

- Mutable - You can change what is stored in them

- Key-Value Pairs

- {a:1, b:2, c:3}

Make a new dictionary
Access a value
 You can also have nested dictionaries.  A use for a nested dictionary might be a user list with information about each user.
### Your Turn

Create a dictionary called `my_cohort` that uses the names of everyone in your cohort as the key and their favorite color as the value.
## Sets
  - Unordered

  - Unique elements (no duplicates)

  - Mutable

  - {1, 2, 3}
Sets are good for testing membership, overlap, etc.
### Your Turn

1. Create a set called `set_1` that includes the numbers: 5, 10, 15, 20, 25, 30.

2. Create a set called `set_2` that includes the numbers:

10, 20, 30, 40, 50, 60, 70, 80, 90.

3. Use a set **method** to return a set that includes the numbers that are in both `set_1` and `set_2`. That is, what numbers are common to both sets?<br />*Hint*: You may need to read the documentation for the set methods to figure out which one to use.  
## Tuples

  - Unmutable - You can't change them!

  - Ordered

  - (1, 2, 3)
### Combining tuples
### Appending a single value to a tuple
Tuples are often returned from functions/methods
### Your Turn

1. Create a tuple that contains the following numbers:

5, 10, 5, 20, 5, 30, 5, 40.

2. Use a tuple method to count the number of 5's in your tuple.
## Further Reading:

[WhirlwindTourOfPython - Built-In Data Structures](https://github.com/jakevdp/WhirlwindTourOfPython/blob/master/06-Built-in-Data-Structures.ipynb)



For more information about lists look to the lists notebook.
cohort_pets = {'dogs':14, 'cats': 1, 'snake': 1, 'goats': 5}

cohort_pets
cohort_pets['dogs']
cohort_pets['cats']
pop_return = cohort_pets.pop('cats')
print(pop_return)

print(cohort_pets)
# Use .keys() to view dictionary keys

cohort_pets.keys()
# Use .values() to view dictionary valus

cohort_pets.values()
# Add to your dictionary

cohort_pets['hamsters'] = 1

print(cohort_pets)
users = {'kyla':{'first name': 'kyla', 'last name': 'bendt', 'city': 'tijeras'}, 'cliff':{'first name': 'cliff', 'last name': 'lewis', 'city': 'albuquerque'}}

users
users['cliff']

((users)['cliff'])['city']
# Solution

my_cohort = {

    "Anna": "red",

    "James": "orange",

    "Mel":"yellow",

    "Wil":"green",

    "Mohamed":"blue",

    "Minerva":"indigo",

    "Joe":"violet",

}

my_cohort
keys = "a b c d e".split()

values = "1 2 3 4 5".split()

dict(zip(keys, values))

divisible_numbers = {4,6,8,9,10,12,14,15,15,15,15,15,11}

print(divisible_numbers)
prime_numbers = {1,2,3,5,7,11, 'thirteen'}

print(prime_numbers)
prime_numbers.
all_numbers = prime_numbers.union(divisible_numbers)

print(all_numbers)
all_numbers - prime_numbers
prime_numbers.issubset(all_numbers)
# Solution 1

set_1 = { 5, 10, 15, 20, 25, 30}

set_1
# Solution 2

set_2 = { 10, 20, 30, 40, 50, 60, 70, 80, 90 }

set_2
# Solution 3

set_1.intersection(set_2)
set_1 & set_2
set_2-(set_2-set_1)
help(set_1.intersection)
my_tuple = (5, 2, 3, 1, 1, 1, 4)

my_tuple
my_tuple = 5, 2, 3, 1, 3, 1, 7

my_tuple
my_tuple[0]
type(my_tuple)
another_tuple = 1, 2, 3, 4, 3, 1
my_tuple[1]
my_tuple.
my_tuple.count(1)
my_tuple.index(2)
my_tuple.index?

t1 = ( 1,2,3)

t2 = ( 4,5,6 )

t1+t2
( t1, t2)
t1 + 4
t1 + (4)
t1 + (4,)
t1
t1 = t1 + (4,)

t1
x = 0.125

x.as_integer_ratio()
( num, den ) = x.as_integer_ratio()

print(f"{num}/{den}")
ratio = x.as_integer_ratio()

print(f"{ratio[0]}/{ratio[1]}")
numerator, denominator = x.as_integer_ratio()

print('numerator is ', numerator)
denominator
# Solution 1

my_other_tuple = ( 5, 10, 5, 20, 5, 30, 5, 40 )

my_other_tuple
# Solution 2

my_other_tuple.count(5)
