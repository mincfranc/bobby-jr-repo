# Regular Expressions
## What are regular expressions?

- Regular expressions are designed for matching patterns in text.

- Examples are picking out three digits in a row or characters separated by white space or punctuation(i.e. words in a sentence).

- **They can be extremely useful for parsing & cleaning data - check that entries follow a certain format or extract parts of a string based on certain criteria**

- The downside is that they aren't very human-readable.

- Can be tricky to code

- Sometimes called REs, regexes or regex patterns
![regex](https://imgs.xkcd.com/comics/regular_expressions.png)
## Regular Expressions in Python
## Matching

Regular expressions can be used to match letters and characters. The syntax for matching (and many other re functions) is `re.match(pattern, string)`.
## Other Types of Match Functions

There are other types of match functions that can be used with regular expressions.

-  match() - looks to match the beginning of a string

-  search() - will match anywhere in the string

-  findall()  - finds all substrings that match and returns as a list

# Regular Expression Patterns
##**Special Sequences**




Often we may want to match for a generic pattern, in order to find numbers, characters, or text. Below is a table of special matching sequences.



Pattern | Description

--|--

\d | One digit

\D | Inverse of \d. One non-digit

\w | One alphanumeric character

\W | Inverse of \w

\s | One whitespace

\S | Inverse of \s

\b | Empty string at beginning or end
### Your Turn

Create a sentence of your choice. Do the following:

1. Use the `match` function to match on the first character of your sentence.

2. Use the `search` function to match on the letter "a".

3. Use the `findall` function to find all non-whitespaces.

## Alternate Sequence Notation
Sometimes we want to be more specific about the alphanumeric characters we want to match on.



Pattern | Description

--|--

[ab12] | Any character from this list

[a-d] | Any character from a to d

[^a-d] | Inverse of [a-d]
### Your Turn

Write a regular expression to find all non-vowels in the sentence *Good morning!*.
```python

good_sentence = 'Oh, Good Morning!'

good_sentence

```
## Repeating
So far, we have only been using special sequences to match on a single character. Often, we will want to match on repeating characters. Below is a table that describes the notation for repeating characters.



Pattern | Description

--|--

* | Checks if preceding character appears zero or more times => {0,}

+ | Checks if preceding character appears one or more times => {1,}

? | Checks if preceding character appears exactly zero or one times => {0,1}

{n} | Checks if preceding character appears n times

{n,m} | Checks if preceding character appears between n and m times, inclusive



### Your Turn

Use the `findall()` function with regular expressions to find the following from `my_sentence`:

1. All words/numbers that are exactly 3 characters long

2. All numbers that are one digit

3. Any word that begins with "w"

4. **Bonus**: Any word that contains an "a"
```python

my_sentence = "It was 100 degrees, so I went to the pool! I jumped off a 9 foot high dive."



```
## A Few Other Matching Sequences



Pattern | Description

--|--

. | Any character (wildcard)

\| | Either or
# Metacharacters - special characters

These characters have special meanings and do not match themselves

. ^ $ * + ? { } [ ] \ | ( )
## Backslashes - escape out special characters

If you want to match a special character the `\` in front of it lets you do this.

# Match Object
The match and search functions return a match object that has the following methods/attributes:



- .span() - returns a tuple containing the start and end positions of the match.

- .string - returns the string passed into the function

- .group() - returns the part of the string where there was a match
# Grouping
Groups let you catch parts of a string to use separately.
# Example
Use a regular expression to pick just the phone number out from this string AND store it as a new string in the format XXX-XXX-XXXX.
# Regex & Pandas DataFrames

We can also use methods using regular expressions on dataframes.



This is extremely useful for cleaning data.

## Your Turn

1. Create a pandas data frame named `my_cohort` with one column that contains the names of everyone in your cohort ( or names of people that you know ), and a second column that contains the favorite food of everyone in your cohort.

2. Use regular expressions to find anyone with a 3-5 letter first name, returning a data frame.

3. Use regular expressions to find anyone whose favorite food starts with any letter from "a" to "m", returning a data frame.

## Recommended Resources
- [Python.org Regular Expression HOWTO](https://docs.python.org/3/howto/regex.html)- Regular Expression Documentation

- [Python Data Science Handbook - Working with Strings](https://github.com/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/03.10-Working-With-Strings.ipynb) - covers regular expressions and other useful string methods in Pandas

- [Mastering Regular Expressions](https://learning.oreilly.com/library/view/mastering-regular-expressions/0596528124/)

- [Regex planet]( https://www.regexplanet.com/ )

- [Regex reference]( https://www.regular-expressions.info/refflavors.html )





# re is the regular expression module in python

import re

re.match?
# Most characters will match themselves

m = re.match('test', 'test')

( bool(m), m )

m = re.match('t', 'today')

( bool(m), m )
m = re.match('y', 'today')

( bool(m), m )

m = re.match('tod', 'today')

( bool(m), m )

my_string = "1. 2. 3. ... testing, testing"

my_string

# Match example

m = re.match('testing', my_string)

( bool(m), m )

# Search example

m = re.search('testing', my_string)

( bool(m), m )

# Findall example

m = re.findall('testing', my_string)

( bool(m), m )

# If there is no match, it will return None

m = re.search('hi', my_string)

( bool(m), m )

print(re.search('hi', my_string))

my_sentence = 'It was 100 degrees, so I went to the pool! I jumped off a 9 foot high dive. '

my_sentence

# Find all single digits

re.findall(r'\d', my_sentence)
# Find all single characters

re.findall(r'\w', my_sentence)

# Find first whitespace

re.search(r'\s', my_sentence)

# Find all non-digits

re.findall(r'\D', my_sentence)

my_sentence

# Find all beginning letters of each word/number

re.findall(r'\b\w', my_sentence)

my_line = "The quick brown fox jumped over the lazy dogs."
# Solution 1 - variant 1

re.match(r'\w', my_line)
# Solution 1 - variant 2

re.match(r'T', my_line)
# Solution 2

re.search(r'a', my_line)
# Solution 3

re.findall(r'\S', my_line)
# re.
my_sentence

# Find all a's, b's, 1's and 2's

re.findall(r'[ab12]', my_sentence)

# Find all characters except a-t

re.findall(r'[^a-t]', my_sentence)

# Find all vowels

re.findall(r'[aeiouAEIOU]', my_sentence)

re.findall?

# Solution

good_sentence = 'Oh, Good Morning!'

good_sentence

non_vowels = r'[^aeiouAEIOU]'

re.findall( non_vowels, good_sentence )

my_sentence

# \w

# \w\w

# \w\w\w

# \w\w\w\w

# \w\w\w\w\w

# \w\w\w\w\w\w

# \w\w\w\w\w\w\w

# \w+
# Find all words/numbers with 1 or more character

re.findall(r'\w+', my_sentence)

re.findall(r'\d+', my_sentence)

my_sentence1 = "Happy Popo Day, Papoooy"

my_sentence1

# Find all 'p' or 'po' or 'poo' or 'pooo', etc.

re.findall(r'[Pp]o*', my_sentence1)

# Find all 'p' or 'po'

re.findall(r'po?', my_sentence1)

# Find all numbers

re.findall(r'\d+', my_sentence)

# Find any words that end with "f"

re.findall(r'\w+f\b', my_sentence + " office" )

my_sentence

# Find all four letter words

# re.findall(r'\w{4}', my_sentence)

re.findall(r'\b\w{4}\b', my_sentence)

# find all words that are at most 4 characters long

re.findall(r'\b\w{1,4}\b', my_sentence)

# find all words that are at least 4 characters long

re.findall(r'\b\w{4,}\b', my_sentence)

my_sentence = "It was 100 degrees, so I went to the pool! I jumped off a 9 foot high dive."

my_sentence
# Solution 1

re.findall(r'\b\w{3}\b', my_sentence)
# Solution 2

re.findall(r'\b\d\b', my_sentence)
# Solution 3 - variant 1

re.findall(r'\bw\w*\b', my_sentence)
# Solution 3 - variant 2

re.findall(r'\bw\w{0,}\b', my_sentence)
# Solution 4

re.findall(r'\b\w*a\w*\b', my_sentence)
my_sentence = "It was 100 degrees, so I went to the pool! I jumped off a 9 foot high dive."

my_sentence

re.findall(r'e.', my_sentence)
re.findall(r'high|dive', my_sentence)
# this will match '2+2' whereas '2+2' without the \ would match any series of more than three 2s

my_char_string = '2+2  22222'

re.findall(r'2+2', my_char_string)

re.findall(r'2\+2', my_char_string)
my_text = 'The cohort 14 students are data science ninjas'

my_match = re.search('cohort', my_text)

print(my_match.span())

print(my_match.string)

print(my_match.group())

seq = "GCACGTGTAACTCTGATCTAGACACGTATC"

site = re.search(r'AC[AG][CT]GT', seq)

start, end = site.span()

(

    len(seq),

    site.group(),

    seq[:start],

    seq[start:end],

    seq[end:]



)

site = re.search(r'AC[AG][CT]GT', seq[start+1:])

site



for i in re.findall(r'AC[AG][CT]GT', seq):

  print(re.search(i, seq).span())



# group(1) is determined by our first set of ()

# in this case it is one or more word characters \w+

# group(2) is determined by our second set of ()

# in this case it is one or more numbers \d+



# let's say you have data in the form 'name:height'

data = 'Nevin:65:87111:ABQ:505-333-1234'

m1 = re.search(r'(\w+):(\d+)', data)



print(m1.group(0))

print(m1.group(1))

print(m1.group(2))

m1 = re.search(r'(\d+)-((\d+)-(\d+))', 'Nevin:65:87111:ABQ:505-333-1234')



# group(0) is always the entire result

print(m1.group(0))

print(m1.group(1))

print(m1.group(2))

print(m1.group(3))

print(m1.group(4))

name = "Robert          Citek"

name
m1 = re.search(r'(\w+) +(\w+)', name)

print(m1.group(0))

print(m1.group(1))

print(m1.group(2))

print(f"{m1.group(2)}, {m1.group(1)}")

contact = 'Brandon - 980  - - -  "; DROP TABLE CONTACTS ;" 123 alfjdalsdkf asdf 4567'

contact

m2 = re.search(r'(\d{3})(\D*)(\d{3})(\D*)(\d{4})', contact)

m2.group(0)

(

    m2.group(1),

    m2.group(2),

    m2.group(3),

    m2.group(4),

    m2.group(5),

)
new_number = f"{m2.group(1)}-{m2.group(3)}-{m2.group(5)}"

new_number

garbage = '''

Joe Smith

Doe, John

       fred jones, jr.

jones jr., fred

'''

print(garbage)
re.search(r'(\w+) *(\w+)', garbage)

for line in garbage.split("\n"):

  print(line)

  if re.search(r'\S*', line):



  if "," in line:

    m1 = re.search(r'(\w+), *(\w+)', line)

    print(f"== {m1.group(1).title()}, {m1.group(2).title()}")

  else:

    m1 = re.search(r'(\w+) *(\w+)', line)

    print(f"== {m1.group(2).title()}, {m1.group(1).title()}")

import pandas as pd
name_df = pd.DataFrame([[0, 'Kyla Bendt'],

                      [1, 'Ben Ben'],

                      [2, 'Bart Simpson'],

                      [3, 'Stan Lowell'],

                      [4, 'Daniel Tiger']],

                     columns=["id","names"])

name_df
bs_names = name_df["names"].str.match(r'[BS]') # Names that start w/ a B or S

bs_names
name_df[bs_names]

names_3 = name_df["names"].str.match(r'\b\w{1,3}\b') # Three letter first names

print(names_3)

name_df[names_3]

name_df

# Extract first names and make a new column in data frame

name_df["first_names"] = name_df["names"].str.extract(r'(\w+)')

name_df

# Count the number of people who have a first name the start with "B"

name_df['first_names'].str.count(r'B+')

name_df['first_names'].str.count(r'B+').sum()

# Split on a space

name_df['names'].str.split(r' ')

%%capture output

!pip install faker faker_food

from faker import Faker

from faker_food import FoodProvider

# Create a Faker instance

fake = Faker()

fake.add_provider(FoodProvider)

size_of_cohort = 10
random_names = [fake.name() for _ in range(size_of_cohort)]

random_names
random_food = [ fake.dish() for _ in range(size_of_cohort) ]

random_food
# Solution 1

my_cohort = pd.DataFrame( {

    "names": random_names,

    "fav_food": random_food,

}

)

my_cohort
# Solution 2

filter = my_cohort["names"].str.match(r'\w{3,5}\b')

my_cohort[filter]
# Solution 3

filter = my_cohort["fav_food"].str.match(r'[a-m]', case=False)

my_cohort[filter]
